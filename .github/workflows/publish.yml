# GitHub Actions Workflow for building and publishing a C/C++ CMake project for Linux
#
# This workflow is triggered when a new tag matching the pattern 'v*' (e.g., v1.0, v1.2.3) is pushed.
# It builds the project on Ubuntu.
# After a successful build, it creates a GitHub Release
# and uploads the packaged library as a release asset.

name: Release C/C++ Library (Linux)

# Controls when the workflow will run
on:
  # Triggers the workflow on push events, but only for tags that match 'v*'
  push:
    tags:
      - 'v*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds the library on an Ubuntu runner
  build:
    name: Build on Ubuntu
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # 1. Check-out the repository code so the workflow can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure the CMake project
      #    -S . specifies the source directory is the current directory.
      #    -B build specifies that the build files should be generated in a 'build' directory.
      #    CMAKE_BUILD_TYPE=Release optimizes the build for performance.
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      # 3. Build the project using the configuration generated in the previous step
      #    --config Release specifies the build configuration.
      #    --parallel adds parallelism to speed up the build.
      - name: Build project
        run: cmake --build build --config Release --parallel

      # 4. "Install" the project. This step copies the final library files, headers,
      #    and any other specified assets into a staging directory ('install' in this case).
      #    This makes it easy to package the final distributable artifacts.
      #    Your CMakeLists.txt must have an `install()` command for this to work.
      - name: Install project
        run: cmake --install build --prefix "install"

      # 5. Package the installed files into a tar.gz archive.
      - name: Package artifacts
        run: tar -czvf release.tar.gz -C install .

      # 6. Upload the created package as a workflow artifact.
      #    This allows the 'publish' job to download and use it later.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-ubuntu-latest
          path: release.tar.gz
          if-no-files-found: error # Fails the step if the archive isn't found

  # This job runs after the 'build' job has completed successfully.
  # It creates the GitHub Release and uploads the artifact.
  publish:
    name: Publish Release
    # This job requires the 'build' job to succeed
    needs: build
    runs-on: ubuntu-latest

    # Grant permissions for the GITHUB_TOKEN to create releases and write assets.
    permissions:
      contents: write

    steps:
      # 1. Download the build artifact (package) that was uploaded by the build job.
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: package-ubuntu-latest
          path: artifacts

      # 2. List files for debugging purposes to ensure the artifact was downloaded correctly.
      - name: List downloaded files
        run: ls -R artifacts

      # 3. Create a new GitHub Release.
      #    This action uses the tag that triggered the workflow as the release name.
      #    It then uploads the downloaded tar.gz file as a release asset.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # The `files` input supports glob patterns to upload files.
          files: artifacts/release.tar.gz
